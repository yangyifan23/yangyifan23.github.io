//------------------------------
// 数据
//------------------------------
var DATA = {};
DATA.playing = false; // 游戏是否正在进行中
DATA.playerActions = []; // 玩家操作指令队列
DATA.DIR = { UP: 0, RIGHT: 1, DOWN: 2, LEFT: 3 }; // 方块的方向，上右下左
DATA.lastDropTime; // 上一次方块自动下落的时间（毫秒）
DATA.rows = 0; // 已经消灭的行数
DATA.score = 0; // 游戏得分
DATA.speed = {
  start: 600, // 最开始的速度（方块最开始时自动下落需要的时长）
  decrement: 5, // 每次消灭一行，减少的毫秒数
  min: 100 // 最小速度
};
DATA.setpSize = DATA.speed.start; // 当前步长，方块每次下落需要的时间长度（毫秒）
DATA.currentPiece = null; // 当前正在下落的方块
DATA.nextPiece = null; // 下一枚方块
DATA.pieceContainer = []; // 存放一批固定的方块，每次随机获取，取完之后会再次生成一批
DATA.pieceTemplate =
  // 方块模版，定义了各类方块的颜色形状等
  {
    I: {
      maxWidth: 4,
      color: "#fa1e1e",
      blocks: {
        0: [
          [0, 0, 0, 0],
          [1, 1, 1, 1],
          [0, 0, 0, 0],
          [0, 0, 0, 0]
        ],
        1: [
          [0, 0, 1, 0],
          [0, 0, 1, 0],
          [0, 0, 1, 0],
          [0, 0, 1, 0]
        ],
        2: [
          [0, 0, 0, 0],
          [0, 0, 0, 0],
          [1, 1, 1, 1],
          [0, 0, 0, 0]
        ],
        3: [
          [0, 1, 0, 0],
          [0, 1, 0, 0],
          [0, 1, 0, 0],
          [0, 1, 0, 0]
        ]
      }
    },
    J: {
      maxWidth: 3,
      color: "#42c6f0",
      blocks: {
        0: [
          [0, 1, 0, 0],
          [0, 1, 0, 0],
          [1, 1, 0, 0],
          [0, 0, 0, 0]
        ],
        1: [
          [1, 0, 0, 0],
          [1, 1, 1, 0],
          [0, 0, 0, 0],
          [0, 0, 0, 0]
        ],
        2: [
          [0, 1, 1, 0],
          [0, 1, 0, 0],
          [0, 1, 0, 0],
          [0, 0, 0, 0]
        ],
        3: [
          [0, 0, 0, 0],
          [1, 1, 1, 0],
          [0, 0, 1, 0],
          [0, 0, 0, 0]
        ]
      }
    },
    L: {
      maxWidth: 3,
      color: "#f5821f",
      blocks: {
        0: [
          [0, 1, 0, 0],
          [0, 1, 0, 0],
          [0, 1, 1, 0],
          [0, 0, 0, 0]
        ],
        1: [
          [0, 0, 0, 0],
          [1, 1, 1, 0],
          [1, 0, 0, 0],
          [0, 0, 0, 0]
        ],
        2: [
          [1, 1, 0, 0],
          [0, 1, 0, 0],
          [0, 1, 0, 0],
          [0, 0, 0, 0]
        ],
        3: [
          [0, 0, 1, 0],
          [1, 1, 1, 0],
          [0, 0, 0, 0],
          [0, 0, 0, 0]
        ]
      }
    },
    O: {
      maxWidth: 2,
      color: "#f1fa1e",
      blocks: {
        0: [
          [1, 1, 0, 0],
          [1, 1, 0, 0],
          [0, 0, 0, 0],
          [0, 0, 0, 0]
        ],
        1: [
          [1, 1, 0, 0],
          [1, 1, 0, 0],
          [0, 0, 0, 0],
          [0, 0, 0, 0]
        ],
        2: [
          [1, 1, 0, 0],
          [1, 1, 0, 0],
          [0, 0, 0, 0],
          [0, 0, 0, 0]
        ],
        3: [
          [1, 1, 0, 0],
          [1, 1, 0, 0],
          [0, 0, 0, 0],
          [0, 0, 0, 0]
        ]
      }
    },
    S: {
      maxWidth: 3,
      color: "#4bd838",
      blocks: {
        0: [
          [0, 0, 0, 0],
          [0, 1, 1, 0],
          [1, 1, 0, 0],
          [0, 0, 0, 0]
        ],
        1: [
          [1, 0, 0, 0],
          [1, 1, 0, 0],
          [0, 1, 0, 0],
          [0, 0, 0, 0]
        ],
        2: [
          [0, 1, 1, 0],
          [1, 1, 0, 0],
          [0, 0, 0, 0],
          [0, 0, 0, 0]
        ],
        3: [
          [0, 1, 0, 0],
          [0, 1, 1, 0],
          [0, 0, 1, 0],
          [0, 0, 0, 0]
        ]
      }
    },
    T: {
      maxWidth: 3,
      color: "#d838cb",
      blocks: {
        0: [
          [0, 0, 0, 0],
          [1, 1, 1, 0],
          [0, 1, 0, 0],
          [0, 0, 0, 0]
        ],
        1: [
          [0, 1, 0, 0],
          [1, 1, 0, 0],
          [0, 1, 0, 0],
          [0, 0, 0, 0]
        ],
        2: [
          [0, 1, 0, 0],
          [1, 1, 1, 0],
          [0, 0, 0, 0],
          [0, 0, 0, 0]
        ],
        3: [
          [0, 1, 0, 0],
          [0, 1, 1, 0],
          [0, 1, 0, 0],
          [0, 0, 0, 0]
        ]
      }
    },
    Z: {
      maxWidth: 3,
      color: "#fa1e1e",
      blocks: {
        0: [
          [0, 0, 0, 0],
          [1, 1, 0, 0],
          [0, 1, 1, 0],
          [0, 0, 0, 0]
        ],
        1: [
          [0, 1, 0, 0],
          [1, 1, 0, 0],
          [1, 0, 0, 0],
          [0, 0, 0, 0]
        ],
        2: [
          [1, 1, 0, 0],
          [0, 1, 1, 0],
          [0, 0, 0, 0],
          [0, 0, 0, 0]
        ],
        3: [
          [0, 0, 1, 0],
          [0, 1, 1, 0],
          [0, 1, 0, 0],
          [0, 0, 0, 0]
        ]
      }
    }
  };
DATA.canvasGameWidth = 10; // 游戏画布宽度（以方块为单位）
DATA.canvasGameHeight = 20; // 游戏画布高度（以方块为单位）
DATA.canvasNextLength = 5; // 下一枚方块区域画布边长（以方块为单位）
DATA.canvasGridWidth = 0; // 格子的横向像素数
DATA.canvasGridHeight = 0; // 格子的纵向像素数
DATA.changes = {
  game: false, // 游戏画布 是否发生变化
  next: false, // 下一枚方块画布 是否发生变化
  score: false, // 分数 是否发生变化
  rows: false // 以消灭行数 是否发生变化
};
DATA.gameGrids = []; // 游戏画布格子，按照游戏画布的宽高拆分成多份格子
DATA.canvasGame = document.getElementById("game"); // 游戏区域画布
DATA.canvasNext = document.getElementById("next"); // 下一枚方块区域画布
DATA.brushGame = DATA.canvasGame.getContext("2d"); // 游戏区域画布的刷子
DATA.brushNext = DATA.canvasNext.getContext("2d"); // 下一枚方块区域画布的刷子
